rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Rules for user documents
    match /user/{userId} {
      // Allow unauthenticated users to read user documents
      //allow read: if request.auth == null;
      // Allow authenticated users to read their own user document
      allow read: if request.auth != null;
      // Allow authenticated users to create a user document with their own UID
      allow create: if request.auth != null && request.auth.uid == userId && exists(/databases/$(database)/documents/user/$(userId)) == false;
      // Allow authenticated users to update or delete their own user document
      allow update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for accessing user documents in general
    match /user/{document=**} {
      // Allow authenticated users with admin or superadmin roles to read, write, and delete user documents
      allow read, write, delete: if request.auth != null && (isUserAdmin() || isUserSuperAdmin());
    }

    // Rules for email documents
    match /email/{emailId} {
      // Allow unauthenticated users to read email documents
      allow read: if request.auth == null;
      // Allow authenticated users to create, read, and delete their own email documents
      allow create, read, delete: if request.auth != null;
      // Allow unauthenticated users to update the "blocked" field to true
      allow update: if request.auth == null && request.resource.data.blocked == true && request.resource.data.keys().hasOnly(['blocked']);
    }

    // Rules for company documents
    match /company/{companyName} {      
      // Allow authenticated users to create a new company document      
      allow create: if request.auth != null && exists(/databases/$(database)/documents/user/$(request.resource.data.companyName)) == false;        
    }   
    
    // Rules for loginHistory documents
    match /loginHistory/{document} {
      // Allow unauthenticated users to create loginHistory documents
      allow create: if request.auth == null || request.auth != null;
    }

    // Rules for the "role" collection
    match /role/{document=**} {
      // Allow authenticated users to read the "role" collection
      allow read: if request.auth != null;
    }

    // Rules for the "business_role/accountManager" document
    match /business_role/accountManager {
      // Allow authenticated users to read the "business_role/accountManager" document
      allow read: if request.auth != null;
    }
    
    //function userBelongToCompany(){
    //let userDocRef = /databases/$(database)/documents/user/$(request.auth.uid);
    //let companyDocRef = /databases/$(database)/documents/company/userDocRef.data.companyName;
    
    
    //}
		
    // Function to check if the user has the admin role
    function isUserAdmin() {
      // Reference to the user document
      let userDocRef = /databases/$(database)/documents/user/$(request.auth.uid);
      // Reference to the admin role document
      let adminRoleRef = /databases/$(database)/documents/role/admin;

      // Check if the user and admin role documents exist, and if the user's role matches the adminRoleName
      return exists(userDocRef) && exists(adminRoleRef) &&
        get(userDocRef).data.role == get(adminRoleRef).data.roleName;
    }

    // Function to check if the user has the superadmin role
    function isUserSuperAdmin() {
      // Reference to the user document
      let userDocRef = /databases/$(database)/documents/user/$(request.auth.uid);
      // Reference to the superadmin role document
      let superadminRoleRef = /databases/$(database)/documents/role/superadmin;

      // Check if the user and superadmin role documents exist, and if the user's role matches the superadminRoleName
      return exists(userDocRef) && exists(superadminRoleRef) &&
        get(userDocRef).data.role == get(superadminRoleRef).data.roleName;
    }
  }
}
